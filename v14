import tkinter as tk
from tkinter import messagebox
import random
import re

class MathGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Number Ninjas by Flow Computing")
        self.root.configure(bg="#f6bfdd")

        self.timer_id = None
        self.time_remaining = 10
        self.points = 0
        self.questions_asked = 0
        self.correct_answers = 0
        self.incorrect_answers = 0
        self.correct_answer = None
        self.problem_text = None
        
        self.create_widgets()
        self.display_top_scores()

    def create_widgets(self):
        # Welcome frame
        self.welcome_frame = tk.Frame(self.root, padx=50, pady=30, bg="#f6bfdd")
        self.welcome_frame.pack()

        welcome_label = tk.Label(self.welcome_frame, text="Welcome to Number Ninjas!", font=("Helvetica", 30), bg="#f6bfdd", fg="#fffafa")
        welcome_label.pack(pady=20)

        name_label = tk.Label(self.welcome_frame, text="What's your name?", font=("Helvetica", 22), bg="#f6bfdd", fg="#fffafa")
        name_label.pack()

        self.name_entry = tk.Entry(self.welcome_frame, font=("Helvetica", 18))
        self.name_entry.pack(pady=10)

        start_button = tk.Button(self.welcome_frame, text="Start Game", font=("Helvetica", 18), highlightbackground='#e089bc', command=self.start_game)
        start_button.pack()

        self.top_scores_label = tk.Label(self.welcome_frame, text="Top Scores:\n", font=("Helvetica", 18), bg="#f6bfdd", fg="#fffafa")
        self.top_scores_label.pack(pady=20)

        # Game frame
        self.game_frame = tk.Frame(self.root, padx=50, pady=30, bg="#f6bfdd")

        self.problem_label = tk.Label(self.game_frame, text="", font=("Helvetica", 24), bg="#f6bfdd")
        self.problem_label.pack(pady=20)

        self.entry = tk.Entry(self.game_frame, font=("Helvetica", 24), width=5)
        self.entry.pack(pady=10)

        check_button = tk.Button(self.game_frame, text="Check", font=("Helvetica", 18), highlightbackground='#e089bc', command=self.check_answer)
        check_button.pack()

        self.timer_label = tk.Label(self.game_frame, text="Time left: 10 seconds", font=("Helvetica", 18), bg="#f6bfdd")
        self.timer_label.pack()

        self.score_label = tk.Label(self.game_frame, text="Score: 0", font=("Helvetica", 18), bg="#f6bfdd")
        self.score_label.pack()

        # Bingo grid frame and initialization
        bingo_frame = tk.Frame(self.game_frame, bg="#f6bfdd")
        bingo_frame.pack(pady=20)
        self.bingo_grid = [[None for _ in range(5)] for _ in range(3)]

        for i in range(3):
            for j in range(5):
                self.bingo_grid[i][j] = tk.Label(bingo_frame, text="", width=5, height=2, borderwidth=1, relief="solid", font=("Helvetica", 16))
                self.bingo_grid[i][j].grid(row=i, column=j)

        self.game_frame.pack_forget()

    def generate_problem(self):
        num1 = random.randint(1, 20)
        num2 = random.randint(1, 20)
        return f"{num1} + {num2}", num1 + num2

    def check_answer(self):
        if self.timer_id:
            self.game_frame.after_cancel(self.timer_id)
        
        user_answer = self.entry.get()
        try:
            user_answer = int(user_answer)
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid number")
            return
        
        if user_answer == self.correct_answer:
            messagebox.showinfo("Correct", "Great job!")
            self.update_bingo_board('X')
            self.correct_answers += 1
            self.points += 10
        else:
            messagebox.showerror("Incorrect", f"Wrong answer. The correct answer is {self.correct_answer}")
            self.update_bingo_board('O')
            self.incorrect_answers += 1
            self.points -= 5
        
        self.questions_asked += 1
        self.display_score()

        if self.questions_asked < 15:
            self.new_problem()
        else:
            self.end_game()

    def new_problem(self):
        self.problem_text, self.correct_answer = self.generate_problem()
        self.problem_label.config(text=self.problem_text)
        self.entry.delete(0, tk.END)
        
        self.time_remaining = 10
        self.timer_label.config(text=f"Time left: {self.time_remaining} seconds")
        self.timer_id = self.game_frame.after(1000, self.update_timer)

    def update_timer(self):
        self.time_remaining -= 1
        self.timer_label.config(text=f"Time left: {self.time_remaining} seconds")
        if self.time_remaining > 0:
            self.timer_id = self.game_frame.after(1000, self.update_timer)
        else:
            messagebox.showinfo("Time's up!", "Out of time!")
            self.update_bingo_board('O')
            self.incorrect_answers += 1
            self.points -= 5
            self.questions_asked += 1

            self.entry.delete(0, tk.END)  # Clear the input box
            if self.questions_asked < 15:
                self.new_problem()  # Generate a new question and restart the timer
            else:
                self.end_game()

    def start_game(self):
        player_name = self.name_entry.get().strip()
        if not player_name:
            messagebox.showerror("Error", "Please enter your name.")
            return
        
        if not re.match(r"^[a-zA-Z]+$", player_name):
            messagebox.showerror("Error", "Please enter only letters for your name.")
            return
        
        self.points = 0
        self.questions_asked = 0
        self.correct_answers = 0
        self.incorrect_answers = 0
        self.display_score()
        
        self.welcome_frame.pack_forget()
        self.game_frame.pack()
        self.new_problem()

    def display_score(self):
        self.score_label.config(text=f"Score: {self.points}")

    def update_bingo_board(self, mark):
        for i in range(3):
            for j in range(5):
                if self.bingo_grid[i][j].cget("text") == "":
                    self.bingo_grid[i][j].config(text=mark)
                    return

    def end_game(self):
        player_name = self.name_entry.get().strip()
        if self.correct_answers > self.incorrect_answers:
            messagebox.showinfo("Game Over", f"You win! X: {self.correct_answers}, O: {self.incorrect_answers}, Score: {self.points}")
        else:
            messagebox.showinfo("Game Over", f"You lose! X: {self.correct_answers}, O: {self.incorrect_answers}, Score: {self.points}")
        
        self.save_score(player_name, self.points)
        self.game_frame.pack_forget()
        self.welcome_frame.pack()
        self.display_top_scores()  # Update the top scores display

    def save_score(self, name, score):
        with open("scores.txt", "a") as file:
            file.write(f"{name}: {score}\n")

    def display_top_scores(self):
        try:
            with open("scores.txt", "r") as file:
                scores = file.readlines()
        except FileNotFoundError:
            scores = []

        scores = [score.strip() for score in scores]
        scores.sort(key=lambda x: int(x.split(": ")[1]), reverse=True)

        self.top_scores_label.config(text="Top Scores:\n" + "\n".join(scores[:10]))

# Create the main window and start the game
root = tk.Tk()
game = MathGame(root)
root.mainloop()
