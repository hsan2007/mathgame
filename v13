import tkinter as tk
from tkinter import messagebox
import random
import re

# Function to generate a new math problem
def generate_problem():
    num1 = random.randint(1, 20)
    num2 = random.randint(1, 20)
    return f"{num1} + {num2}", num1 + num2

# Function to check the user's answer
def check_answer():
    global timer_id, time_remaining, points, questions_asked, correct_answers, incorrect_answers
    if timer_id:
        game_frame.after_cancel(timer_id)
    
    user_answer = entry.get()
    try:
        user_answer = int(user_answer)
    except ValueError:
        messagebox.showerror("Error", "Please enter a valid number")
        return
    
    if user_answer == correct_answer:
        messagebox.showinfo("Correct", "Great job!")
        update_bingo_board('X')
        correct_answers += 1
        points += 10
    else:
        messagebox.showerror("Incorrect", f"Wrong answer. The correct answer is {correct_answer}")
        update_bingo_board('O')
        incorrect_answers += 1
        points -= 5
    
    
    questions_asked += 1
    display_score()

    if questions_asked < 15:
        new_problem()
    else:
        end_game()

# Function to display a new problem
def new_problem():
    global problem_text, correct_answer, timer_id, time_remaining
    problem_text, correct_answer = generate_problem()
    problem_label.config(text=problem_text)
    entry.delete(0, tk.END)
    
    time_remaining = 10
    timer_label.config(text=f"Time left: {time_remaining} seconds")
    timer_id = game_frame.after(1000, update_timer)

# Function to update the timer
def update_timer():
    global timer_id, time_remaining
    time_remaining -= 1
    timer_label.config(text=f"Time left: {time_remaining} seconds")
    if time_remaining > 0:
        timer_id = game_frame.after(1000, update_timer)
    else:
        messagebox.showinfo("Time's up!", "Out of time!")
        update_bingo_board('O')
        incorrect_answers += 1
        points -= 5
        questions_asked += 1

        entry.delete(0, tk.END)  # Clear the input box
        if questions_asked < 15:
            new_problem()  # Generate a new question and restart the timer
        else:
            end_game()

# Function to start the game
def start_game():
    global timer_id, time_remaining, points, questions_asked, correct_answers, incorrect_answers
    player_name = name_entry.get().strip()
    if not player_name:
        messagebox.showerror("Error", "Please enter your name.")
        return
    
    if not re.match(r"^[a-zA-Z]+$", player_name):
        messagebox.showerror("Error", "Please enter only letters for your name.")
        return
    
    points = 0
    questions_asked = 0
    correct_answers = 0
    incorrect_answers = 0
    display_score()
    
    welcome_frame.pack_forget()
    game_frame.pack()
    new_problem()

# Function to display the current score
def display_score():
    score_label.config(text=f"Score: {points}")

# Function to update the bingo board with 'X' or 'O'
def update_bingo_board(mark):
    for i in range(3):
        for j in range(5):
            if bingo_grid[i][j].cget("text") == "":
                bingo_grid[i][j].config(text=mark)
                return

# Function to end the game and determine if the player won
def end_game():
    global player_name
    if correct_answers > incorrect_answers:
        messagebox.showinfo("Game Over", f"You win! X: {correct_answers}, O: {incorrect_answers}, Score: {points}")
    else:
        messagebox.showinfo("Game Over", f"You lose! X: {correct_answers}, O: {incorrect_answers}, Score: {points}")
    
    save_score(player_name, points)
    game_frame.pack_forget()
    welcome_frame.pack()
    display_top_scores()  # Update the top scores display

# Function to save the score to a file
def save_score(name, score):
    with open("scores.txt", "a") as file:
        file.write(f"{name}: {score}\n")

# Function to load and display the top scores
def display_top_scores():
    try:
        with open("scores.txt", "r") as file:
            scores = file.readlines()
    except FileNotFoundError:
        scores = []

    scores = [score.strip() for score in scores]
    scores.sort(key=lambda x: int(x.split(": ")[1]), reverse=True)

    top_scores_label.config(text="Top Scores:\n" + "\n".join(scores[:10]))

# Create the main window
root = tk.Tk()
root.title("Number Ninjas by Flow Computing")
root.configure(bg="#f6bfdd")

# Welcome frame
welcome_frame = tk.Frame(root, padx=50, pady=30, bg="#f6bfdd")
welcome_frame.pack()

welcome_label = tk.Label(welcome_frame, text="Welcome to Number Ninjas!", font=("Helvetica", 30), bg="#f6bfdd", fg="#fffafa")
welcome_label.pack(pady=20)

name_label = tk.Label(welcome_frame, text="What's your name?", font=("Helvetica", 22), bg="#f6bfdd", fg="#fffafa")
name_label.pack()

name_entry = tk.Entry(welcome_frame, font=("Helvetica", 18))
name_entry.pack(pady=10)

start_button = tk.Button(welcome_frame, text="Start Game", font=("Helvetica", 18), highlightbackground='#e089bc', command=start_game)
start_button.pack()

top_scores_label = tk.Label(welcome_frame, text="Top Scores:\n", font=("Helvetica", 18), bg="#f6bfdd", fg="#fffafa")
top_scores_label.pack(pady=20)

# Game frame
game_frame = tk.Frame(root, padx=50, pady=30, bg="#f6bfdd")

problem_label = tk.Label(game_frame, text="", font=("Helvetica", 24), bg="#f6bfdd")
problem_label.pack(pady=20)

entry = tk.Entry(game_frame, font=("Helvetica", 24), width=5)
entry.pack(pady=10)

check_button = tk.Button(game_frame, text="Check", font=("Helvetica", 18), highlightbackground='#e089bc', command=check_answer)
check_button.pack()

timer_label = tk.Label(game_frame, text="Time left: 10 seconds", font=("Helvetica", 18), bg="#f6bfdd")
timer_label.pack()

score_label = tk.Label(game_frame, text="Score: 0", font=("Helvetica", 18), bg="#f6bfdd")
score_label.pack()

# Bingo grid frame and initialization
bingo_frame = tk.Frame(game_frame, bg="#f6bfdd")
bingo_frame.pack(pady=20)
bingo_grid = [[None for _ in range(5)] for _ in range(3)]

for i in range(3):
    for j in range(5):
        bingo_grid[i][j] = tk.Label(bingo_frame, text="", width=5, height=2, borderwidth=1, relief="solid", font=("Helvetica", 16))
        bingo_grid[i][j].grid(row=i, column=j)

game_frame.pack_forget()

# Display top scores when the application starts
display_top_scores()

root.mainloop()
